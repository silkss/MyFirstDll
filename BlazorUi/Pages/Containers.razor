@page "/containers"

@using Connectors.Interfaces

<h3>Containers</h3>

@inject NavigationManager NavigationManager

@inject ContainersRepository _ContainersRepository
@inject FutureRepository _FutureRepository;
@inject IConnector _Connector
@inject TraderWorker _TradeWorker

@if (_Connector.IsConnected && _futures != null)
{
    <div class="row">
        <button class="btn btn-primary" @onclick="ShowHideCreateForm">Create new Container</button>
    </div>
    @if (_creating)
    {
        <form>
            <div class="form-group">
                <lable for="selectedFuture">Futures</lable>
                <select class="form-control" id="selectedFuture" @bind="_selectedFutureId">
                    <option value="0">Select future</option>
                    @foreach (var fut in _futures)
                    {
                        <option value="@fut.Id">@fut.LocalSymbol</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <lable for="selectedAccount">Account</lable>
                <select class="form-control" id="selectedAccount" @bind="_selectedAccount">
                    @foreach(var account in _Connector.GetAccountList())
                    {
                        <option>@account</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="wantedPnl">Wanted PnL in currency</label>
                <input type="text" class="form-control" id="wantedPnl" @bind="_wantedPnl">
            </div>
            <div class="form-group">
                <label for="keepAliveInDays">Keep alive in days</label>
                <input type="text" class="form-control" id="keepAliveInDays" @bind="_keepAliveInDays">
            </div>
            @if (_selectedFutureId > 0 && !string.IsNullOrEmpty(_selectedAccount))
            {
                <button class="btn btn-primary" @onclick="CreateNewContainer">Submit</button>
            }
        </form>
    }
}
<div class="row">
    @if (_loadingContainers)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Local symbol</th>
                    <th>Account</th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var container in _containers)
                {
                    <tr>
                        <td>@container.Future?.LocalSymbol</td>
                        <td>@container.Account</td>
                        @if (container.Started)
                        {
                            <td><button class="btn btn-danger" @onclick="(()=> stopContainer(container))">Stop</button></td>
                        }
                        else
                        {
                            <td><button class="btn btn-success" @onclick="(() => startContainer(container))">Start</button></td>
                        }
                        <td>
                            <button class="btn btn-success" @onclick="(() => NavigateToContainerDetailsComponent(container.Id))">Details</button>
                        </td>
                        <td>
                            <button class="btn btn-danger">
                                <span class="oi oi-trash"></span>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private bool _loadingContainers;
    private IList<Container> _containers;
    private IList<DbFuture> _futures;
    private bool _creating = false;

    private string _selectedAccount = string.Empty;
    private int? _selectedFutureId;
    private int _keepAliveInDays;
    private decimal _wantedPnl;

    protected override async Task OnInitializedAsync()
    {
        if (_loadingContainers == true) return;
        try
        {
            _loadingContainers = true;
            _containers = await _ContainersRepository.GetAllAsync();
            _futures = await _FutureRepository.GetAllAsync();

            if (_containers == null)
                _containers = new List<Container>();
        }
        finally
        {
            _loadingContainers = false;
        }
    }

    private void NavigateToContainerDetailsComponent(int containerId)
    {
        NavigationManager.NavigateTo("containerdetails/"+containerId);
    }

    private void startContainer(Container container)
    {
        if (container.Future == null) return;

        _TradeWorker.StartContainer(container);
    }

    private void stopContainer(Container container)
    {
        _TradeWorker.StopContainer(container);
    }

    private void removeContainer(Container container)
    {
    }

    private void ShowHideCreateForm()
    {
        _creating = !_creating;
    }

    private async Task CreateNewContainer()
    {
        if (!_selectedFutureId.HasValue || string.IsNullOrEmpty(_selectedAccount)) return;

        var container = new Container
        {
            FutureId = _selectedFutureId.Value,
            WantedPnl = _wantedPnl,
            Account = _selectedAccount,
            KeepAliveInDays = _keepAliveInDays,
        };

        await _ContainersRepository.CreateAsync(container);
    }

    private void RemoveContainer(Container container)
    {
        //_ContainersRepository
    }
}
