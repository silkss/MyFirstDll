@page "/containers"

@using Connectors.Interfaces

<h3>Containers</h3>

@inject NavigationManager NavigationManager

@inject ContainersRepository _ContainersRepository
@inject IConnector _Connector
@inject TraderWorker _TradeWorker

<div class="row">
    <p><em>Instruments if Db</em></p>
    @if (_loadingContainers)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Local symbol</th>
                    <th>Account</th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var container in _containers)
                {
                    <tr>
                        <td>@container.Future?.LocalSymbol</td>
                        <td>@container.Account</td>
                        @if (container.Started)
                        {
                            <td><button class="btn btn-danger" >Stop</button></td>
                        }
                        else
                        {
                            <td><button class="btn btn-success" @onclick="(() => startContainer(container))">Start</button></td>
                        }
                        <td>
                            <button class="btn btn-success" @onclick="(() => NavigateToContainerDetailsComponent(container.Id))">Details</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private bool _loadingContainers;
    private IList<Container> _containers;
    private IList<DbFuture> _futures;

    protected override async Task OnInitializedAsync()
    {
        if (_loadingContainers == true) return;
        try
        {
            _loadingContainers = true;
            _containers = await _ContainersRepository.GetAllAsync();
            if (_containers == null)
                _containers = new List<Container>();
        }
        finally
        {
            _loadingContainers = false;
        }
    }
    
    private void NavigateToContainerDetailsComponent(int containerId)
    {
        NavigationManager.NavigateTo("containerdetails/"+containerId);
    }

    private void startContainer(Container container)
    {
        if (container.Future == null) return;

        _TradeWorker.StartContainer(container);
    }

    private void stopContainer(Container container)
    {
        _TradeWorker.StopContainer(container);
    }


}
