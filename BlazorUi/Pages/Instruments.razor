@using Connectors.Interfaces

@page "/instruments"

@inject FutureRepository _FutureRepository
@inject ContainersRepository _ContainersRepository
@inject IConnector _Connector

<h3>Instruments</h3>

<div class="row">
@if (_Connector.IsConnected)
{
    <div class="col">
        <input placeholder="type instrument local symbol" @bind="_localSymbol"/>
    </div>
    <div class="col">
        <button class="btn btn-success" @onclick="AddFuture">Add</button>
    </div>
}
else
{
    <div class="col">
        <strong>You cannot add new instruments if connector disconnected!</strong>
    </div>
}
</div>

<div class="row">
    <p><em>Instruments in Db</em></p>
    @if (_futures == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Local symbol</th>
                    <th>Currency</th>
                    <th>Last Trade Date</th>
                    <th>Echange</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var future in _futures)
                {
                    <tr>
                        <td>@future.LocalSymbol</td>
                        <td>@future.Currency</td>
                        <td>@future.LastTradeDate.ToShortDateString()</td>
                        <td>@future.Echange</td>
                        <td>
                            <select @bind="_selectedAccount">
                                <option> 
                                    Choos account
                                </option>
                                @foreach (var account in _accounts)
                                {
                                    <option>
                                        @account
                                    </option>
                                }
                            </select>
                        </td>
                        <td><button class="btn btn-success" @onclick="(() => createContainer(future))">Create container</button> </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private IList<DbFuture>? _futures;
    private IEnumerable<string> _accounts;
    private string _selectedAccount = string.Empty;
    private string? _localSymbol;
    private bool _loadingFuture;

    private Container? newContainer;

    private bool isAddContainer;

    protected override async Task OnInitializedAsync()
    {
        if (_loadingFuture) return;
        try
        {
            _loadingFuture = true;
            _futures = await _FutureRepository.GetAllAsync();
            _accounts = _Connector.GetAccountList();
        }
        finally
        {
            _loadingFuture = false;
        }
    }

    private bool FutureInCahce(DbFuture future) =>
        _Connector.GetCachedFutures().Any(f => f.ConId == future.ConId);

    private async Task AddFuture()
    {
        if (string.IsNullOrEmpty(_localSymbol)) return;
        if (_loadingFuture) return;
        try
        {
            _loadingFuture = true;
            var fut = new DbFuture { LocalSymbol = _localSymbol };
            if (_Connector.TryRequestFuture(fut))
            {
                await _FutureRepository.CreateAsync(fut);
            }
        }
        finally
        {
            _loadingFuture = false;
            _localSymbol = string.Empty;
        }
    }

    private void GetAccounts()
    {
        _accounts = _Connector.GetAccountList();
    }

    private async Task createContainer(DbFuture future)
    {
        if (string.IsNullOrEmpty(_selectedAccount)) return;

        var container = new Container
        {
            Account = _selectedAccount,
            FutureId = future.Id,
        };

        await _ContainersRepository.CreateAsync(container);
    }
}
