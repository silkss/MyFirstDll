@using BlazorUi.Services
@using Connectors.Interfaces

@page "/instruments"

@inject FutureRepository _FutureRepository
@inject IConnector<DbFuture, DbOption> _Connector

<h3>Instruments</h3>

<div class="row">
@if (_Connector.IsConnected)
{
    <div class="col">
        <input placeholder="type instrument local symbol" @bind="_localSymbol"/>
    </div>    
    <div class="col">
        <button class="btn btn-success" @onclick="AddFuture">Add</button>
    </div>
}
else
{
    <div class="col">
        <strong>You cannot add new instruments if connector disconnected!</strong>
    </div>
}
</div>


<div class="row">
@if (_futures == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Local symbol</th>
                <th>Currency</th>
                <th>Last Trade Date</th>
                <th>Echange</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var future in _futures)
        {
            <tr>
                <td>@future.LocalSymbol</td>
                <td>@future.Currency</td>
                <td>@future.LastTradeDate.ToShortDateString()</td>
                <td>@future.Echange</td>
            </tr>
        }
        </tbody>
    </table>
}
</div>

@code {
    private IList<DbFuture>? _futures;
    private string? _localSymbol;
    private bool _loadingFuture;

    protected override async Task OnInitializedAsync()
    {
        if (_loadingFuture) return;
        try
        {
            _loadingFuture = true;
            _futures = await _FutureRepository.GetAllAsync();
            if (_futures == null)
                _futures = new List<DbFuture>();
        }
        finally
        {
            _loadingFuture = false;
        }
    }

    private async Task AddFuture()
    {
        if (string.IsNullOrEmpty(_localSymbol)) return;
        if (_loadingFuture) return;
        try
        {
            _loadingFuture = true;
            var fut = await _Connector.RequestFutureAsync(_localSymbol);
            if (fut != null)
            {
                if (_futures == null) 
                    _futures = new List<DbFuture>();

                if (await _FutureRepository.CreateAsync(fut))
                    _futures.Add(fut);
            }
        }
        finally
        {
            _loadingFuture = false;
            _localSymbol = string.Empty;
        }
    }

}
