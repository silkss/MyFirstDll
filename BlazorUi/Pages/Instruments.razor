@using Connectors.Interfaces

@page "/instruments"

@inject FutureRepository _FutureRepository
@inject ContainersRepository _ContainersRepository
@inject IConnector _Connector

<h3>Instruments</h3>

<div class="row">
@if (_Connector.IsConnected)
{
    <div class="col">
        <input placeholder="type instrument local symbol" @bind="_localSymbol"/>
    </div>
    <div class="col">
        <button class="btn btn-success" @onclick="AddFuture">Add</button>
    </div>
}
else
{
    <div class="col">
        <strong>You cannot add new instruments if connector disconnected!</strong>
    </div>
}
</div>

<div class="row">
    <p><em>Instruments if Db</em></p>
    @if (_futures == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Local symbol</th>
                    <th>Currency</th>
                    <th>Last Trade Date</th>
                    <th>Last price</th>
                    <th>Echange</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var future in _futures)
                {
                    <tr>
                        <td>@future.LocalSymbol</td>
                        <td>@future.Currency</td>
                        <td>@future.LastTradeDate.ToShortDateString()</td>
                        <td>@future.LastPrice</td>
                        <td>@future.Echange</td>
                        <td><button class="btn btn-success" @onclick="(() => openModal(future))">Create container</button> </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    @if (isAddContainer)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-header">Lets create some</h3>
                        <button type="button" class="btn-close" @onclick="closeModal"/>
                    </div>
                    <div class="modal-body">
                        <label class="col-form-label">Account</label>
                        @if (_accounts == null)
                        {
                            <p><em>You need to connect first!</em></p>
                        }
                        else
                        {
                            <select class="form-control" @bind="newContainer.Account">
                                <option value="">-- Select Account --</option>
                                @foreach (var account in _accounts)
                                {
                                    <option value="@account">@account</option>
                                }
                            </select>
                        }
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-success" @onclick="createContainer">Create</button>
                        <button class="btn btn-danger" @onclick="cancelModel">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private IList<DbFuture>? _futures;
    private IEnumerable<string> _accounts;

    private string? _localSymbol;
    private bool _loadingFuture;

    private Container? newContainer;

    private bool isAddContainer;

    protected override async Task OnInitializedAsync()
    {
        if (_loadingFuture) return;
        try
        {
            _loadingFuture = true;
            _futures = await _FutureRepository.GetAllAsync();
            if (_futures == null)
                _futures = new List<DbFuture>();
        }
        finally
        {
            _loadingFuture = false;
        }
    }

    private bool FutureInCahce(DbFuture future) =>
        _Connector.GetCachedFutures().Any(f => f.ConId == future.ConId);

    private async Task AddFuture()
    {
        if (string.IsNullOrEmpty(_localSymbol)) return;
        if (_loadingFuture) return;
        try
        {
            _loadingFuture = true;
            var fut = new DbFuture { LocalSymbol = _localSymbol };
            if (_Connector.TryRequestFuture(fut))
            {
                if (_futures == null)
                    _futures = new List<DbFuture>();

                if (await _FutureRepository.CreateAsync(fut))
                    _futures.Add(fut);
            }
        }
        finally
        {
            _loadingFuture = false;
            _localSymbol = string.Empty;
        }
    }

    private void closeModal()
    {
        isAddContainer = false;
    }

    private void openModal(DbFuture future)
    {
        _accounts = _Connector.GetAccountList();
        newContainer = new();
        //newContainer.Future = future;
        newContainer.FutureId = future.Id;
        newContainer.LastTradeDate = future.LastTradeDate;
        isAddContainer = true;
    }

    private void GetAccounts()
    {
        _accounts = _Connector.GetAccountList();
    }
    private async Task createContainer()
    {
        if (!isAddContainer) return;

        await _ContainersRepository.CreateAsync(newContainer);
        isAddContainer = false;
    }
    private void cancelModel()
    {
        newContainer = null;
        isAddContainer = false;
    }
}
