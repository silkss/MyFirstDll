@page "/"
@using BlazorUi.Services
@using Connectors.Interfaces
@using Microsoft.EntityFrameworkCore

<PageTitle>Index</PageTitle>
@inject IConnector<DbFuture, DbOption> _Connector
@inject FutureRepository _FutureRepository

<h1>Hello, world!</h1>

<div class="row">
    <div class="col">
        @if (_connected)
        {
            <button class="btn btn-danger" @onclick="Disconnect">Disconnect</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="Connect">Connect</button>
        }
    </div>
</div>

<div class="row">
    <div class="col">
        <input placeholder="type instrument local symbol" @bind="_localSymbol"/>
    </div>
    <div class="col">
        <button class="btn btn-success" @onclick="AddFuture">Add</button>
    </div>
</div>

<div class="row">
    @if (_futures == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Local symbol</th>
                    <th>Currency</th>
                    <th>Last Trade Date</th>
                    <th>Echange</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var future in _futures)
                {
                    <tr>
                        <td>@future.LocalSymbol</td>
                        <td>@future.Currency</td>
                        <td>@future.LastTradeDate.ToShortDateString()</td>
                        <td>@future.Echange</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

<SurveyPrompt Title="How is Blazor working for you?" />

@code {
    private IList<DbFuture>? _futures;
    private string? _localSymbol;
    private bool _loadingFuture;
    private bool _connected;

    protected override async Task OnInitializedAsync()
    {
        _connected = _Connector.IsConnected;
        if (_loadingFuture) return;
        try
        {
            _loadingFuture = true;
            _futures = await _FutureRepository.GetAllAsync();
            if (_futures == null)
                _futures = new List<DbFuture>();
        }
        finally
        {
            _loadingFuture = false;
        }
    }

    private void Connect()
    {
        _Connector.Connect();
        _connected = _Connector.IsConnected;
    }

    private void Disconnect()
    {
        _Connector.Disconnect();
        _connected = _Connector.IsConnected;
    }

    private async Task AddFuture()
    {
        if (string.IsNullOrEmpty(_localSymbol)) return;
        if (_loadingFuture) return;
        try
        {
            _loadingFuture = true;
            var fut = await _Connector.RequestFutureAsync(_localSymbol);
            if (fut != null)
            {
                if (_futures == null) 
                    _futures = new List<DbFuture>();

                if (await _FutureRepository.CreateAsync(fut))
                    _futures.Add(fut);
            }
        }
        finally
        {
            _loadingFuture = false;
            _localSymbol = string.Empty;
        }
    }
}